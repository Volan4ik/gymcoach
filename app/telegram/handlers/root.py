# app/telegram/handlers/root.py
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from app.telegram.keyboards.reply import (
    main_kb, settings_kb,
    BTN_HOME, BTN_SETTINGS, BTN_BACK,
    BTN_ME, BTN_PLAN, BTN_TODAY, BTN_HELP,
    BTN_REMIND, BTN_LOG, BTN_PRIVACY,
)

router = Router(name="root")

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤ ---

async def show_main_screen(message: Message) -> None:
    text = (
        "üèãÔ∏è‚Äç‚ôÇÔ∏è *–ì–ª–∞–≤–Ω–∞—è*\n\n"
        "‚Äî /today ‚Äî –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Äî /plan ‚Äî —Å–æ–∑–¥–∞—Ç—å/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω\n"
        "‚Äî /me ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Äî /settings ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∂—É—Ä–Ω–∞–ª, –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n"
        "‚Äî /help ‚Äî –ø–æ–º–æ—â—å\n"
    )
    await message.answer(text, reply_markup=main_kb(), parse_mode="Markdown")

async def show_settings_screen(message: Message) -> None:
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "‚Äî /remind ‚Äî –æ–∫–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Äî /log ‚Äî –∂—É—Ä–Ω–∞–ª –∏ –ø—Ä–∞–≤–∫–∏\n"
        "‚Äî /privacy ‚Äî –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≥—Ä—É–∑–∫–∞\n"
        "–ù–∞–∂–º–∏ ¬´–ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é."
    )
    await message.answer(text, reply_markup=settings_kb(), parse_mode="Markdown")

# --- –°—Ç–∞—Ä—Ç/–≥–ª–∞–≤–Ω–∞—è ---

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await state.clear()              # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã
    await show_main_screen(message)

# –ö–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–∞—è¬ª (—Ç–µ–∫—Å—Ç) –∏ –∫–æ–º–∞–Ω–¥–∞ /home
@router.message(F.text == BTN_HOME)
@router.message(Command("home"))
async def go_home(message: Message, state: FSMContext) -> None:
    await state.clear()
    await show_main_screen(message)

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º ---

@router.message(F.text == BTN_SETTINGS)
@router.message(Command("settings"))
async def open_settings(message: Message, state: FSMContext) -> None:
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ (–≤–≤–æ–¥ —á–∏—Å–ª–∞ –∏ —Ç.–ø.), –ª—É—á—à–µ –µ–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    await state.clear()
    await show_settings_screen(message)

@router.message(F.text == BTN_BACK)
async def back_to_main(message: Message, state: FSMContext) -> None:
    await state.clear()
    await show_main_screen(message)

# --- –ü—É–Ω–∫—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∏ –∫–Ω–æ–ø–∫–∏) ---

@router.message(Command("me"))
@router.message(F.text == BTN_ME)
async def open_profile(message: Message) -> None:
    # TODO: –¥–æ—Å—Ç–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏
    await message.answer("üë§ –ü—Ä–æ—Ñ–∏–ª—å (–¥–µ–º–æ). –¢—É—Ç –±—É–¥—É—Ç TZ/—Ü–µ–ª—å/–æ–ø—ã—Ç/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.", reply_markup=main_kb())

@router.message(Command("plan"))
@router.message(F.text == BTN_PLAN)
async def open_plan(message: Message) -> None:
    # TODO: –º–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∞ –∏–ª–∏ –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ
    await message.answer("üìÖ –ü–ª–∞–Ω (–¥–µ–º–æ). –¢—É—Ç –±—É–¥–µ—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=main_kb())

@router.message(Command("today"))
@router.message(F.text == BTN_TODAY)
async def open_today(message: Message) -> None:
    # TODO: –∑–∞–ø—É—Å–∫/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ WorkoutSession
    await message.answer("üî• –°–µ–≥–æ–¥–Ω—è (–¥–µ–º–æ). –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=main_kb())

@router.message(Command("help"))
@router.message(F.text == BTN_HELP)
async def open_help(message: Message) -> None:
    await message.answer(
        "‚ùì *–ü–æ–º–æ—â—å*\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–∞—è\n"
        "/today ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/plan ‚Äî –ø–ª–∞–Ω\n"
        "/me ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n",
        parse_mode="Markdown",
        reply_markup=main_kb(),
    )

# --- –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª ---

@router.message(Command("remind"))
@router.message(F.text == BTN_REMIND)
async def open_remind(message: Message) -> None:
    # TODO: –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É –¥–Ω–µ–π/–≤—Ä–µ–º–µ–Ω (Reply/Inline), —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∫–Ω–∞
    await message.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–µ–º–æ). –í—ã–±–æ—Ä –¥–Ω–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏.", reply_markup=settings_kb())

@router.message(Command("log"))
@router.message(F.text == BTN_LOG)
async def open_log(message: Message) -> None:
    # TODO: –ª–∏—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å¬ª
    await message.answer("üìú –ñ—É—Ä–Ω–∞–ª (–¥–µ–º–æ). –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/—Å–µ—Ç—ã.", reply_markup=settings_kb())

@router.message(Command("privacy"))
@router.message(F.text == BTN_PRIVACY)
async def open_privacy(message: Message) -> None:
    # TODO: /export –∏ /wipe —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer("üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å (–¥–µ–º–æ). –≠–∫—Å–ø–æ—Ä—Ç/—É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=settings_kb())
